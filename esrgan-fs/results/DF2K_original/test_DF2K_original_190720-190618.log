19-07-20 19:06:18.586 - INFO:   name: DF2K_original
  suffix: None
  model: sr
  distortion: sr
  scale: 4
  crop_border: None
  gpu_ids: [0]
  datasets:[
    test:[
      name: DIV2K_val
      mode: LQGT
      dataroot_GT: /home/manuelf/scratch/datasets/DF2K/clean/valid_HR
      dataroot_LQ: /home/manuelf/scratch/datasets/DF2K/clean/valid_LR
      phase: test
      scale: 4
      data_type: img
    ]
  ]
  network_G:[
    which_model_G: RRDBNet
    in_nc: 3
    out_nc: 3
    nf: 64
    nb: 23
    upscale: 4
    scale: 4
  ]
  path:[
    pretrain_model_G: ../experiments/pretrained_models/DF2K_original.pth
    root: /scratch_net/biwidl209/manuelf/mesrgan
    results_root: /scratch_net/biwidl209/manuelf/mesrgan/results/DF2K_original
    log: /scratch_net/biwidl209/manuelf/mesrgan/results/DF2K_original
  ]
  is_train: False

19-07-20 19:06:18.598 - INFO: Dataset [LQGTDataset - DIV2K_val] is created.
19-07-20 19:06:18.598 - INFO: Number of test images in [DIV2K_val]: 100
19-07-20 19:06:22.176 - INFO: Network G structure: DataParallel - RRDBNet, with parameters: 16,697,987
19-07-20 19:06:22.176 - INFO: RRDBNet(
  (conv_first): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (RRDB_trunk): Sequential(
    (0): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (1): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (2): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (3): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (4): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (5): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (6): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (7): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (8): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (9): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (10): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (11): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (12): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (13): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (14): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (15): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (16): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (17): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (18): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (19): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (20): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (21): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
    (22): RRDB(
      (RDB1): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB2): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
      (RDB3): ResidualDenseBlock_5C(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace)
      )
    )
  )
  (trunk_conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (upconv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (upconv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (HRconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_last): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (lrelu): LeakyReLU(negative_slope=0.2, inplace)
)
19-07-20 19:06:22.177 - INFO: Loading model for G [../experiments/pretrained_models/DF2K_original.pth] ...
19-07-20 19:06:22.948 - INFO: Model [SRModel] is created.
19-07-20 19:06:27.727 - INFO: 
Testing [DIV2K_val]...
19-07-20 19:06:38.133 - INFO: 0801                 - PSNR: 26.506478 dB; SSIM: 0.776509; PSNR_Y: 27.921302 dB; SSIM_Y: 0.795787; LPIPS: 0.232741.
19-07-20 19:06:47.372 - INFO: 0802                 - PSNR: 31.216419 dB; SSIM: 0.792120; PSNR_Y: 33.070500 dB; SSIM_Y: 0.832125; LPIPS: 0.143182.
19-07-20 19:06:57.886 - INFO: 0803                 - PSNR: 38.116902 dB; SSIM: 0.944958; PSNR_Y: 40.294548 dB; SSIM_Y: 0.963220; LPIPS: 0.131566.
19-07-20 19:07:05.753 - INFO: 0804                 - PSNR: 25.961774 dB; SSIM: 0.739585; PSNR_Y: 27.495658 dB; SSIM_Y: 0.768926; LPIPS: 0.218233.
19-07-20 19:07:16.237 - INFO: 0805                 - PSNR: 25.549787 dB; SSIM: 0.654851; PSNR_Y: 26.948187 dB; SSIM_Y: 0.690684; LPIPS: 0.315318.
19-07-20 19:07:25.337 - INFO: 0806                 - PSNR: 26.273635 dB; SSIM: 0.806074; PSNR_Y: 28.025988 dB; SSIM_Y: 0.830882; LPIPS: 0.181852.
19-07-20 19:07:32.729 - INFO: 0807                 - PSNR: 17.758289 dB; SSIM: 0.400308; PSNR_Y: 19.220725 dB; SSIM_Y: 0.431020; LPIPS: 0.308378.
19-07-20 19:07:41.913 - INFO: 0808                 - PSNR: 23.916918 dB; SSIM: 0.719926; PSNR_Y: 25.353896 dB; SSIM_Y: 0.750178; LPIPS: 0.244240.
19-07-20 19:07:50.871 - INFO: 0809                 - PSNR: 29.230908 dB; SSIM: 0.767706; PSNR_Y: 30.734817 dB; SSIM_Y: 0.794353; LPIPS: 0.245908.
19-07-20 19:08:01.345 - INFO: 0810                 - PSNR: 23.679545 dB; SSIM: 0.674916; PSNR_Y: 24.960695 dB; SSIM_Y: 0.707542; LPIPS: 0.272037.
19-07-20 19:08:10.348 - INFO: 0811                 - PSNR: 26.329802 dB; SSIM: 0.685146; PSNR_Y: 27.585869 dB; SSIM_Y: 0.721632; LPIPS: 0.273118.
19-07-20 19:08:20.808 - INFO: 0812                 - PSNR: 25.274398 dB; SSIM: 0.746088; PSNR_Y: 26.592090 dB; SSIM_Y: 0.770005; LPIPS: 0.240074.
19-07-20 19:08:30.505 - INFO: 0813                 - PSNR: 29.694287 dB; SSIM: 0.833838; PSNR_Y: 31.157827 dB; SSIM_Y: 0.864851; LPIPS: 0.200041.
19-07-20 19:08:39.518 - INFO: 0814                 - PSNR: 26.171802 dB; SSIM: 0.870206; PSNR_Y: 27.614765 dB; SSIM_Y: 0.885033; LPIPS: 0.161889.
19-07-20 19:08:48.492 - INFO: 0815                 - PSNR: 33.027284 dB; SSIM: 0.891575; PSNR_Y: 35.368597 dB; SSIM_Y: 0.916243; LPIPS: 0.154090.
19-07-20 19:08:57.471 - INFO: 0816                 - PSNR: 28.817895 dB; SSIM: 0.748448; PSNR_Y: 30.228207 dB; SSIM_Y: 0.780010; LPIPS: 0.265195.
19-07-20 19:09:07.842 - INFO: 0817                 - PSNR: 30.349750 dB; SSIM: 0.844907; PSNR_Y: 32.102156 dB; SSIM_Y: 0.870573; LPIPS: 0.186346.
19-07-20 19:09:18.292 - INFO: 0818                 - PSNR: 27.338392 dB; SSIM: 0.864681; PSNR_Y: 28.773889 dB; SSIM_Y: 0.884705; LPIPS: 0.193623.
19-07-20 19:09:27.391 - INFO: 0819                 - PSNR: 25.504639 dB; SSIM: 0.752807; PSNR_Y: 27.108612 dB; SSIM_Y: 0.775363; LPIPS: 0.215082.
19-07-20 19:09:36.311 - INFO: 0820                 - PSNR: 22.948603 dB; SSIM: 0.753811; PSNR_Y: 24.375649 dB; SSIM_Y: 0.771798; LPIPS: 0.208058.
19-07-20 19:09:45.222 - INFO: 0821                 - PSNR: 29.805990 dB; SSIM: 0.880533; PSNR_Y: 31.307638 dB; SSIM_Y: 0.908693; LPIPS: 0.123731.
19-07-20 19:09:56.127 - INFO: 0822                 - PSNR: 28.698965 dB; SSIM: 0.820048; PSNR_Y: 30.260357 dB; SSIM_Y: 0.847016; LPIPS: 0.172118.
19-07-20 19:10:04.248 - INFO: 0823                 - PSNR: 23.226624 dB; SSIM: 0.724674; PSNR_Y: 24.602783 dB; SSIM_Y: 0.756986; LPIPS: 0.215514.
19-07-20 19:10:12.821 - INFO: 0824                 - PSNR: 26.326464 dB; SSIM: 0.847706; PSNR_Y: 27.801118 dB; SSIM_Y: 0.866132; LPIPS: 0.199906.
19-07-20 19:10:21.718 - INFO: 0825                 - PSNR: 25.156178 dB; SSIM: 0.730458; PSNR_Y: 26.609415 dB; SSIM_Y: 0.757658; LPIPS: 0.234479.
19-07-20 19:10:32.206 - INFO: 0826                 - PSNR: 22.317913 dB; SSIM: 0.711480; PSNR_Y: 23.585203 dB; SSIM_Y: 0.734614; LPIPS: 0.228850.
19-07-20 19:10:42.632 - INFO: 0827                 - PSNR: 32.184895 dB; SSIM: 0.824157; PSNR_Y: 33.626653 dB; SSIM_Y: 0.856483; LPIPS: 0.279417.
19-07-20 19:10:51.349 - INFO: 0828                 - PSNR: 21.596249 dB; SSIM: 0.876401; PSNR_Y: 22.913791 dB; SSIM_Y: 0.928570; LPIPS: 0.124067.
19-07-20 19:11:00.258 - INFO: 0829                 - PSNR: 25.019175 dB; SSIM: 0.469151; PSNR_Y: 26.388395 dB; SSIM_Y: 0.518080; LPIPS: 0.315554.
19-07-20 19:11:05.236 - INFO: 0830                 - PSNR: 21.005455 dB; SSIM: 0.613572; PSNR_Y: 22.516265 dB; SSIM_Y: 0.639225; LPIPS: 0.264951.
19-07-20 19:11:14.193 - INFO: 0831                 - PSNR: 28.975299 dB; SSIM: 0.852506; PSNR_Y: 30.392925 dB; SSIM_Y: 0.874206; LPIPS: 0.171034.
19-07-20 19:11:23.247 - INFO: 0832                 - PSNR: 27.952672 dB; SSIM: 0.817532; PSNR_Y: 29.724440 dB; SSIM_Y: 0.844781; LPIPS: 0.192160.
19-07-20 19:11:33.791 - INFO: 0833                 - PSNR: 32.725615 dB; SSIM: 0.865519; PSNR_Y: 34.258268 dB; SSIM_Y: 0.892298; LPIPS: 0.233223.
19-07-20 19:11:42.710 - INFO: 0834                 - PSNR: 22.789302 dB; SSIM: 0.718265; PSNR_Y: 24.266971 dB; SSIM_Y: 0.734130; LPIPS: 0.219910.
19-07-20 19:11:53.714 - INFO: 0835                 - PSNR: 20.370775 dB; SSIM: 0.464396; PSNR_Y: 21.810767 dB; SSIM_Y: 0.492949; LPIPS: 0.373195.
19-07-20 19:12:04.074 - INFO: 0836                 - PSNR: 24.202344 dB; SSIM: 0.752957; PSNR_Y: 25.584073 dB; SSIM_Y: 0.776947; LPIPS: 0.191982.
19-07-20 19:12:12.719 - INFO: 0837                 - PSNR: 24.577370 dB; SSIM: 0.787474; PSNR_Y: 26.003885 dB; SSIM_Y: 0.807695; LPIPS: 0.206856.
19-07-20 19:12:21.718 - INFO: 0838                 - PSNR: 34.503512 dB; SSIM: 0.834642; PSNR_Y: 36.189878 dB; SSIM_Y: 0.871677; LPIPS: 0.211432.
19-07-20 19:12:30.639 - INFO: 0839                 - PSNR: 26.507488 dB; SSIM: 0.757347; PSNR_Y: 27.908445 dB; SSIM_Y: 0.776993; LPIPS: 0.208365.
19-07-20 19:12:39.615 - INFO: 0840                 - PSNR: 26.760022 dB; SSIM: 0.758954; PSNR_Y: 28.176664 dB; SSIM_Y: 0.780084; LPIPS: 0.274754.
19-07-20 19:12:48.597 - INFO: 0841                 - PSNR: 26.003461 dB; SSIM: 0.804020; PSNR_Y: 27.431079 dB; SSIM_Y: 0.828529; LPIPS: 0.227264.
19-07-20 19:12:57.226 - INFO: 0842                 - PSNR: 27.222613 dB; SSIM: 0.795052; PSNR_Y: 28.560871 dB; SSIM_Y: 0.812825; LPIPS: 0.205681.
19-07-20 19:13:05.988 - INFO: 0843                 - PSNR: 39.264905 dB; SSIM: 0.967296; PSNR_Y: 41.448510 dB; SSIM_Y: 0.976435; LPIPS: 0.045944.
19-07-20 19:13:14.998 - INFO: 0844                 - PSNR: 42.118689 dB; SSIM: 0.979271; PSNR_Y: 44.367525 dB; SSIM_Y: 0.987882; LPIPS: 0.079998.
19-07-20 19:13:24.116 - INFO: 0845                 - PSNR: 23.286894 dB; SSIM: 0.738890; PSNR_Y: 24.721512 dB; SSIM_Y: 0.771106; LPIPS: 0.223432.
19-07-20 19:13:33.073 - INFO: 0846                 - PSNR: 24.017547 dB; SSIM: 0.763764; PSNR_Y: 25.406806 dB; SSIM_Y: 0.787258; LPIPS: 0.211182.
19-07-20 19:13:41.981 - INFO: 0847                 - PSNR: 26.515281 dB; SSIM: 0.781255; PSNR_Y: 28.061438 dB; SSIM_Y: 0.809581; LPIPS: 0.195771.
19-07-20 19:13:52.499 - INFO: 0848                 - PSNR: 25.844545 dB; SSIM: 0.650814; PSNR_Y: 27.235605 dB; SSIM_Y: 0.698562; LPIPS: 0.229547.
19-07-20 19:14:01.602 - INFO: 0849                 - PSNR: 20.228517 dB; SSIM: 0.688986; PSNR_Y: 21.715221 dB; SSIM_Y: 0.713509; LPIPS: 0.252998.
19-07-20 19:14:10.562 - INFO: 0850                 - PSNR: 27.573085 dB; SSIM: 0.785421; PSNR_Y: 29.017664 dB; SSIM_Y: 0.811203; LPIPS: 0.224137.
19-07-20 19:14:19.212 - INFO: 0851                 - PSNR: 26.227485 dB; SSIM: 0.809854; PSNR_Y: 27.709159 dB; SSIM_Y: 0.850443; LPIPS: 0.205457.
19-07-20 19:14:26.437 - INFO: 0852                 - PSNR: 27.518932 dB; SSIM: 0.760641; PSNR_Y: 28.693129 dB; SSIM_Y: 0.790288; LPIPS: 0.248658.
19-07-20 19:14:35.320 - INFO: 0853                 - PSNR: 31.579273 dB; SSIM: 0.878543; PSNR_Y: 33.431404 dB; SSIM_Y: 0.911116; LPIPS: 0.179070.
19-07-20 19:14:42.341 - INFO: 0854                 - PSNR: 21.766734 dB; SSIM: 0.625223; PSNR_Y: 23.151717 dB; SSIM_Y: 0.651662; LPIPS: 0.260823.
19-07-20 19:14:56.484 - INFO: 0855                 - PSNR: 27.279993 dB; SSIM: 0.675918; PSNR_Y: 28.654579 dB; SSIM_Y: 0.717977; LPIPS: 0.318596.
19-07-20 19:15:05.032 - INFO: 0856                 - PSNR: 22.100474 dB; SSIM: 0.616930; PSNR_Y: 24.930540 dB; SSIM_Y: 0.649608; LPIPS: 0.306411.
19-07-20 19:15:13.730 - INFO: 0857                 - PSNR: 33.669148 dB; SSIM: 0.742579; PSNR_Y: 35.197455 dB; SSIM_Y: 0.794722; LPIPS: 0.304155.
19-07-20 19:15:22.619 - INFO: 0858                 - PSNR: 25.957948 dB; SSIM: 0.684233; PSNR_Y: 27.334186 dB; SSIM_Y: 0.724683; LPIPS: 0.269361.
19-07-20 19:15:31.442 - INFO: 0859                 - PSNR: 22.195607 dB; SSIM: 0.560770; PSNR_Y: 23.571920 dB; SSIM_Y: 0.595168; LPIPS: 0.315873.
19-07-20 19:15:41.981 - INFO: 0860                 - PSNR: 18.190624 dB; SSIM: 0.531623; PSNR_Y: 19.581980 dB; SSIM_Y: 0.548536; LPIPS: 0.324138.
19-07-20 19:15:51.188 - INFO: 0861                 - PSNR: 21.137848 dB; SSIM: 0.693602; PSNR_Y: 22.413980 dB; SSIM_Y: 0.723367; LPIPS: 0.251473.
19-07-20 19:16:00.173 - INFO: 0862                 - PSNR: 30.234986 dB; SSIM: 0.746213; PSNR_Y: 31.678008 dB; SSIM_Y: 0.785879; LPIPS: 0.246433.
19-07-20 19:16:10.625 - INFO: 0863                 - PSNR: 30.688496 dB; SSIM: 0.849260; PSNR_Y: 32.096559 dB; SSIM_Y: 0.870852; LPIPS: 0.183787.
19-07-20 19:16:19.672 - INFO: 0864                 - PSNR: 27.550838 dB; SSIM: 0.682562; PSNR_Y: 28.907987 dB; SSIM_Y: 0.715008; LPIPS: 0.303453.
19-07-20 19:16:30.033 - INFO: 0865                 - PSNR: 24.626949 dB; SSIM: 0.672728; PSNR_Y: 26.030281 dB; SSIM_Y: 0.701164; LPIPS: 0.305805.
19-07-20 19:16:38.899 - INFO: 0866                 - PSNR: 22.124787 dB; SSIM: 0.736366; PSNR_Y: 23.614569 dB; SSIM_Y: 0.756750; LPIPS: 0.241494.
19-07-20 19:16:47.802 - INFO: 0867                 - PSNR: 26.578327 dB; SSIM: 0.811102; PSNR_Y: 27.771847 dB; SSIM_Y: 0.835536; LPIPS: 0.188016.
19-07-20 19:16:56.812 - INFO: 0868                 - PSNR: 30.882110 dB; SSIM: 0.945020; PSNR_Y: 32.230661 dB; SSIM_Y: 0.950411; LPIPS: 0.098745.
19-07-20 19:17:05.907 - INFO: 0869                 - PSNR: 20.944081 dB; SSIM: 0.716489; PSNR_Y: 22.333007 dB; SSIM_Y: 0.733977; LPIPS: 0.256139.
19-07-20 19:17:16.587 - INFO: 0870                 - PSNR: 26.557650 dB; SSIM: 0.782517; PSNR_Y: 27.976122 dB; SSIM_Y: 0.807761; LPIPS: 0.204229.
19-07-20 19:17:25.875 - INFO: 0871                 - PSNR: 30.422447 dB; SSIM: 0.867260; PSNR_Y: 32.046127 dB; SSIM_Y: 0.886832; LPIPS: 0.176735.
19-07-20 19:17:34.992 - INFO: 0872                 - PSNR: 21.519181 dB; SSIM: 0.564103; PSNR_Y: 22.880557 dB; SSIM_Y: 0.599985; LPIPS: 0.288834.
19-07-20 19:17:44.210 - INFO: 0873                 - PSNR: 21.688578 dB; SSIM: 0.665805; PSNR_Y: 23.061395 dB; SSIM_Y: 0.686846; LPIPS: 0.251987.
19-07-20 19:17:53.401 - INFO: 0874                 - PSNR: 27.773893 dB; SSIM: 0.699647; PSNR_Y: 29.219722 dB; SSIM_Y: 0.736397; LPIPS: 0.276422.
19-07-20 19:18:03.857 - INFO: 0875                 - PSNR: 22.446475 dB; SSIM: 0.579402; PSNR_Y: 23.779934 dB; SSIM_Y: 0.607764; LPIPS: 0.290831.
19-07-20 19:18:12.884 - INFO: 0876                 - PSNR: 19.844544 dB; SSIM: 0.489885; PSNR_Y: 21.052825 dB; SSIM_Y: 0.523663; LPIPS: 0.309551.
19-07-20 19:18:20.418 - INFO: 0877                 - PSNR: 38.743922 dB; SSIM: 0.954032; PSNR_Y: 40.547258 dB; SSIM_Y: 0.967393; LPIPS: 0.106396.
19-07-20 19:18:32.381 - INFO: 0878                 - PSNR: 30.386787 dB; SSIM: 0.848521; PSNR_Y: 31.972698 dB; SSIM_Y: 0.870600; LPIPS: 0.201928.
19-07-20 19:18:44.977 - INFO: 0879                 - PSNR: 24.792733 dB; SSIM: 0.797547; PSNR_Y: 26.153266 dB; SSIM_Y: 0.825802; LPIPS: 0.202774.
19-07-20 19:18:53.917 - INFO: 0880                 - PSNR: 29.728688 dB; SSIM: 0.861338; PSNR_Y: 31.180100 dB; SSIM_Y: 0.875873; LPIPS: 0.219112.
19-07-20 19:19:02.105 - INFO: 0881                 - PSNR: 23.234322 dB; SSIM: 0.696324; PSNR_Y: 24.698926 dB; SSIM_Y: 0.716840; LPIPS: 0.229406.
19-07-20 19:19:11.034 - INFO: 0882                 - PSNR: 31.898276 dB; SSIM: 0.921236; PSNR_Y: 33.472574 dB; SSIM_Y: 0.943452; LPIPS: 0.112196.
19-07-20 19:19:20.248 - INFO: 0883                 - PSNR: 22.617133 dB; SSIM: 0.587658; PSNR_Y: 24.391307 dB; SSIM_Y: 0.630176; LPIPS: 0.334132.
19-07-20 19:19:29.211 - INFO: 0884                 - PSNR: 24.469098 dB; SSIM: 0.701077; PSNR_Y: 26.281481 dB; SSIM_Y: 0.735933; LPIPS: 0.263770.
19-07-20 19:19:38.320 - INFO: 0885                 - PSNR: 20.120275 dB; SSIM: 0.458859; PSNR_Y: 21.562989 dB; SSIM_Y: 0.505049; LPIPS: 0.303533.
19-07-20 19:19:47.545 - INFO: 0886                 - PSNR: 34.350595 dB; SSIM: 0.871457; PSNR_Y: 36.276601 dB; SSIM_Y: 0.903693; LPIPS: 0.182778.
19-07-20 19:19:56.596 - INFO: 0887                 - PSNR: 21.954385 dB; SSIM: 0.656282; PSNR_Y: 23.088005 dB; SSIM_Y: 0.679922; LPIPS: 0.234743.
19-07-20 19:20:05.674 - INFO: 0888                 - PSNR: 29.582748 dB; SSIM: 0.851634; PSNR_Y: 31.112464 dB; SSIM_Y: 0.874934; LPIPS: 0.159299.
19-07-20 19:20:14.733 - INFO: 0889                 - PSNR: 29.499021 dB; SSIM: 0.874826; PSNR_Y: 31.194165 dB; SSIM_Y: 0.894442; LPIPS: 0.139675.
19-07-20 19:20:23.893 - INFO: 0890                 - PSNR: 22.601766 dB; SSIM: 0.665735; PSNR_Y: 23.983140 dB; SSIM_Y: 0.681219; LPIPS: 0.229180.
19-07-20 19:20:35.433 - INFO: 0891                 - PSNR: 25.284728 dB; SSIM: 0.767814; PSNR_Y: 26.655391 dB; SSIM_Y: 0.795989; LPIPS: 0.182797.
19-07-20 19:20:43.788 - INFO: 0892                 - PSNR: 30.031475 dB; SSIM: 0.912091; PSNR_Y: 31.514788 dB; SSIM_Y: 0.925119; LPIPS: 0.142809.
19-07-20 19:20:52.845 - INFO: 0893                 - PSNR: 30.845023 dB; SSIM: 0.714987; PSNR_Y: 32.429153 dB; SSIM_Y: 0.767977; LPIPS: 0.256429.
19-07-20 19:21:01.550 - INFO: 0894                 - PSNR: 29.962229 dB; SSIM: 0.851241; PSNR_Y: 31.343825 dB; SSIM_Y: 0.870652; LPIPS: 0.185871.
19-07-20 19:21:10.100 - INFO: 0895                 - PSNR: 17.075542 dB; SSIM: 0.420741; PSNR_Y: 18.448719 dB; SSIM_Y: 0.442944; LPIPS: 0.373527.
19-07-20 19:21:18.876 - INFO: 0896                 - PSNR: 37.053689 dB; SSIM: 0.915365; PSNR_Y: 38.844941 dB; SSIM_Y: 0.940539; LPIPS: 0.159141.
19-07-20 19:21:27.815 - INFO: 0897                 - PSNR: 20.075360 dB; SSIM: 0.602348; PSNR_Y: 21.323461 dB; SSIM_Y: 0.648122; LPIPS: 0.231773.
19-07-20 19:21:36.685 - INFO: 0898                 - PSNR: 32.385704 dB; SSIM: 0.848103; PSNR_Y: 34.031138 dB; SSIM_Y: 0.887719; LPIPS: 0.167662.
19-07-20 19:21:45.750 - INFO: 0899                 - PSNR: 30.351763 dB; SSIM: 0.876671; PSNR_Y: 31.788079 dB; SSIM_Y: 0.900324; LPIPS: 0.145782.
19-07-20 19:21:53.085 - INFO: 0900                 - PSNR: 26.208313 dB; SSIM: 0.793732; PSNR_Y: 27.496446 dB; SSIM_Y: 0.835170; LPIPS: 0.184119.
19-07-20 19:21:53.132 - INFO: ----Average PSNR/SSIM/LPIPS results for DIV2K_val----
	PSNR: 26.752063 dB; SSIM: 0.751689; LPIPS: 0.222837

19-07-20 19:21:53.132 - INFO: ----Y channel, average PSNR/SSIM----
	PSNR_Y: 28.259687 dB; SSIM_Y: 0.779433

